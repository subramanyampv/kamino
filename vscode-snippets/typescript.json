{
    // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "describe": {
        "prefix": "desc",
        "body": [
            "describe('$1', () => {",
            "\t$2",
            "});"
        ],
        "description": "Jasmine describe scope"
    },

    "beforeEachInjectStore": {
        "prefix": "beis",
        "body": [
            "beforeEach(inject([Store], (mockStore: MockStore<AppState>) => {",
            "\t$1",
            "}));"
        ],
        "description": "Jasmine beforeEach with inject mock store"
    },

    "spyObj": {
        "prefix": "spyobj",
        "body": "const ${1:service} = jasmine.createSpyObj<${2:Service}>('${2:Service}', ['${3:methodName}']);",
        "description": "Create a Jasmine spyObj",
    },

    "resetMocks": {
        "prefix": "rm",
        "body": "Object.keys(${1:spyObj}).forEach(spyName => ${1:spyObj}[spyName].calls.reset());",
        "description": "Reset all spies of a Jasmine spyObj"
    },

    "console.log": {
        "prefix": "clog",
        "body": "console.log(`$1`);",
        "description": "Log to console"
    }
}